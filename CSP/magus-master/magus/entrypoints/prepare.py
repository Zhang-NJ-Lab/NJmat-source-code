import os

hehe = """# Auto generated by MAGUS
formulaType: fix        # or var for Variable component search 
initSize: 40
popSize: 40
numGen: 20
saveGood: 3             # number of good structures kept to the next generation

#structure parameters
minNAtoms: 10           # number of min atoms
maxNAtoms: 20           # number of max atoms
spacegroup: 10-20       # target spacegroup
symbols: ['Zn','O', 'H']
formula: [1, 1, 1]      # or [[1,0,0],[0,1,1]] for Znx(OH)y
# eleSize: 3            # used in var, control how many boundary structures are generated

                        # the mindist between two atoms is:
dRatio: 0.8             # dRatio * (covalent_radii[i] + covalent_radii[j])
                        # or
# distanceMatrix:       # distance matrix (unit: A)
#  - [1.5, 1.4, 1.2]    
#  - [1.4, 1.5, 0.85]
#  - [1.2, 0.85, 0.5]
volumeRatio: 1.2        # the volume / the sum of the atoms ball volume
randRatio: 1            # fraction of random
pressure: 1000          # pressure (unit: GPa)
addSym: True            # whether to add symmetry before crossover and mutation

autoOpRatio: False      # auto adjust the ratio of operators
autoRandomRatio: False  # auto adjust the ratio of random structures
# main calculator settings
MainCalculator:
 mode: parallel
 jobPrefix: ['Vasp1', 'Vasp2', 'Vasp3', 'Vasp4']

 #vasp settings
 xc: PBE
 ppLabel: ['', '', '']

 #parallel settings
 numParallel: 40        # number of parallel jobs
 numCore: 12            # number of cores
 queueName: 9242opa!
 # queueName: e52692v2ib!
 # preProcessing: module load anaconda/3-5.0.1 # load environment if necessary
 waitTime: 100

# ML calculator settings
# poolSize: 2000        # used in ML search for initialize the pot
# DFTRelax: False       # use DFT to check the relaxation
# MLCalculator:
#  init_times: 0        # numbers to initialize the pot
#  jobPrefix: MTP
#  queueName: 9242opa!
#  force_tolerance: 0.001
#  stress_tolerance: 0.01
#  numCore: 48
#  waitTime: 60
"""

INCAR_1 = """
PREC = LOW
EDIFF = 3e-3
IBRION = 2
ISIF = 4
NSW = 70
ISMEAR = 1 ; SIGMA = 0.10
POTIM = 0.020
ISTART = 0
#Crude optimisation
EDIFFG = -2e-1
KSPACING = 1.256
LWAVE = F
"""

INCAR_2 = """
PREC = Normal
EDIFF = 1e-3
IBRION = 1
ISIF = 4
NSW = 85
ISMEAR = 1 ; SIGMA = 0.06
POTIM = 0.20
#Crude optimisation
EDIFFG = 1e-2
KSPACING = 0.942
LWAVE = F
"""

INCAR_3 = """
PREC = Normal
ENCUT = 320.0
EDIFF = 1e-3
IBRION = 2
ISIF = 3
NSW = 100
ISMEAR = 1 ; SIGMA = 0.060
POTIM = 0.020
#Crude optimisation
EDIFFG = 1e-2
KSPACING = 0.628
LWAVE = F
"""

INCAR_4 = """
PREC = Normal
ENCUT = 320.00
EDIFF = 1e-4
IBRION = 1
ISIF = 3
NSW = 0
ISMEAR = 1 ; SIGMA = 0.060
POTIM = 0.250
#Crude optimisation
EDIFFG = 1e-3
KSPACING = 0.314
LWAVE = F
"""

INCARS = [INCAR_1, INCAR_2, INCAR_3, INCAR_4]
# TODO
# 来个苦力
def prepare(*args, var=False, mol=False, calc_type='vasp', **kwargs):
    if not os.path.exists('input.yaml'):
        with open('input.yaml', 'w') as f:
            f.writelines(hehe)
    os.makedirs('Seeds', exist_ok=True)
    input_dir = os.path.join(os.getcwd(), 'inputFold')
    if not os.path.exists(input_dir):
        for i in range(4):
            filename = os.path.join(input_dir, 'Vasp{}'.format(i + 1))
            os.makedirs(filename, exist_ok=True)
            os.chdir(filename)
            with open('INCAR', 'w') as f:
                f.writelines(INCARS[i])
    print('Done')

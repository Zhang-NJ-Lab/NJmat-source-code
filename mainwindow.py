# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1848, 1374)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(800, 1220, 231, 27))
        self.label.setObjectName("label")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(210, 110, 1431, 1021))
        self.textBrowser.setObjectName("textBrowser")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(620, 1305, 591, 16))
        self.label_3.setText("")
        self.label_3.setObjectName("label_3")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1848, 23))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        self.menu_rfe_pairplot = QtWidgets.QMenu(self.menu)
        self.menu_rfe_pairplot.setObjectName("menu_rfe_pairplot")
        self.menu_3 = QtWidgets.QMenu(self.menu)
        self.menu_3.setObjectName("menu_3")
        self.menu_2 = QtWidgets.QMenu(self.menubar)
        self.menu_2.setObjectName("menu_2")
        self.menu_6 = QtWidgets.QMenu(self.menubar)
        self.menu_6.setObjectName("menu_6")
        self.menuAlgorithms = QtWidgets.QMenu(self.menu_6)
        self.menuAlgorithms.setObjectName("menuAlgorithms")
        self.menuRegression = QtWidgets.QMenu(self.menuAlgorithms)
        self.menuRegression.setObjectName("menuRegression")
        self.menuGrid_Search = QtWidgets.QMenu(self.menuRegression)
        self.menuGrid_Search.setObjectName("menuGrid_Search")
        self.menuDeep_Learning = QtWidgets.QMenu(self.menuRegression)
        self.menuDeep_Learning.setObjectName("menuDeep_Learning")
        self.menuClassification = QtWidgets.QMenu(self.menuAlgorithms)
        self.menuClassification.setObjectName("menuClassification")
        self.menuDeep_Learning_2 = QtWidgets.QMenu(self.menuClassification)
        self.menuDeep_Learning_2.setObjectName("menuDeep_Learning_2")
        self.menu_7 = QtWidgets.QMenu(self.menubar)
        self.menu_7.setObjectName("menu_7")
        self.menuImport_no_featurizer_no_label = QtWidgets.QMenu(self.menu_7)
        self.menuImport_no_featurizer_no_label.setObjectName("menuImport_no_featurizer_no_label")
        self.menuImport_and_generate_Multicolumn_Smiles_Morgan = QtWidgets.QMenu(self.menu_7)
        self.menuImport_and_generate_Multicolumn_Smiles_Morgan.setObjectName("menuImport_and_generate_Multicolumn_Smiles_Morgan")
        self.menuImport_and_generate_Multicolumn_Smiles_RDKit = QtWidgets.QMenu(self.menu_7)
        self.menuImport_and_generate_Multicolumn_Smiles_RDKit.setObjectName("menuImport_and_generate_Multicolumn_Smiles_RDKit")
        self.menu_9 = QtWidgets.QMenu(self.menubar)
        self.menu_9.setObjectName("menu_9")
        self.menu_10 = QtWidgets.QMenu(self.menubar)
        self.menu_10.setObjectName("menu_10")
        self.menu_15 = QtWidgets.QMenu(self.menu_10)
        self.menu_15.setObjectName("menu_15")
        self.menu_16 = QtWidgets.QMenu(self.menu_10)
        self.menu_16.setObjectName("menu_16")
        self.menuInorganic_descriptor_matminer = QtWidgets.QMenu(self.menu_10)
        self.menuInorganic_descriptor_matminer.setObjectName("menuInorganic_descriptor_matminer")
        self.menuHybrid_inorganic_organic_2in1 = QtWidgets.QMenu(self.menu_10)
        self.menuHybrid_inorganic_organic_2in1.setObjectName("menuHybrid_inorganic_organic_2in1")
        self.menuMulticolumn_Smiles_Morgan = QtWidgets.QMenu(self.menu_10)
        self.menuMulticolumn_Smiles_Morgan.setObjectName("menuMulticolumn_Smiles_Morgan")
        self.menuOrganic_Multicolum_Smiles_RDKit = QtWidgets.QMenu(self.menu_10)
        self.menuOrganic_Multicolum_Smiles_RDKit.setObjectName("menuOrganic_Multicolum_Smiles_RDKit")
        self.menu_11 = QtWidgets.QMenu(self.menubar)
        self.menu_11.setObjectName("menu_11")
        self.menu_17 = QtWidgets.QMenu(self.menu_11)
        self.menu_17.setObjectName("menu_17")
        self.menuShapley = QtWidgets.QMenu(self.menubar)
        self.menuShapley.setObjectName("menuShapley")
        self.menuShap_Regression = QtWidgets.QMenu(self.menuShapley)
        self.menuShap_Regression.setObjectName("menuShap_Regression")
        self.menuShap_Classification = QtWidgets.QMenu(self.menuShapley)
        self.menuShap_Classification.setObjectName("menuShap_Classification")
        self.menuHints = QtWidgets.QMenu(self.menubar)
        self.menuHints.setObjectName("menuHints")
        self.menuNLP = QtWidgets.QMenu(self.menubar)
        self.menuNLP.setObjectName("menuNLP")
        self.menuMatBERT = QtWidgets.QMenu(self.menuNLP)
        self.menuMatBERT.setObjectName("menuMatBERT")
        self.menuCosine_Similarity_Plot = QtWidgets.QMenu(self.menuMatBERT)
        self.menuCosine_Similarity_Plot.setObjectName("menuCosine_Similarity_Plot")
        self.menuClustering = QtWidgets.QMenu(self.menuMatBERT)
        self.menuClustering.setObjectName("menuClustering")
        self.menuword2vec = QtWidgets.QMenu(self.menuNLP)
        self.menuword2vec.setObjectName("menuword2vec")
        self.menuVisualizer = QtWidgets.QMenu(self.menubar)
        self.menuVisualizer.setObjectName("menuVisualizer")
        self.menuMaterials_Project = QtWidgets.QMenu(self.menubar)
        self.menuMaterials_Project.setObjectName("menuMaterials_Project")
        self.menuCSP = QtWidgets.QMenu(self.menubar)
        self.menuCSP.setObjectName("menuCSP")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.action_heatmap = QtWidgets.QAction(MainWindow)
        self.action_heatmap.setObjectName("action_heatmap")
        self.actionrfe = QtWidgets.QAction(MainWindow)
        self.actionrfe.setObjectName("actionrfe")
        self.action1 = QtWidgets.QAction(MainWindow)
        self.action1.setObjectName("action1")
        self.action2 = QtWidgets.QAction(MainWindow)
        self.action2.setObjectName("action2")
        self.action = QtWidgets.QAction(MainWindow)
        self.action.setObjectName("action")
        self.action_rfe = QtWidgets.QAction(MainWindow)
        self.action_rfe.setObjectName("action_rfe")
        self.action_3 = QtWidgets.QAction(MainWindow)
        self.action_3.setObjectName("action_3")
        self.action_4 = QtWidgets.QAction(MainWindow)
        self.action_4.setObjectName("action_4")
        self.action_rfe_pairplot = QtWidgets.QAction(MainWindow)
        self.action_rfe_pairplot.setObjectName("action_rfe_pairplot")
        self.action6_1_1xgboost = QtWidgets.QAction(MainWindow)
        self.action6_1_1xgboost.setObjectName("action6_1_1xgboost")
        self.action6_1_2xgboost = QtWidgets.QAction(MainWindow)
        self.action6_1_2xgboost.setObjectName("action6_1_2xgboost")
        self.action6_1_3xgboostRandomSearchCV = QtWidgets.QAction(MainWindow)
        self.action6_1_3xgboostRandomSearchCV.setObjectName("action6_1_3xgboostRandomSearchCV")
        self.action6_1_4xgboost_SearchCV = QtWidgets.QAction(MainWindow)
        self.action6_1_4xgboost_SearchCV.setObjectName("action6_1_4xgboost_SearchCV")
        self.action6_2_1Random_forest = QtWidgets.QAction(MainWindow)
        self.action6_2_1Random_forest.setObjectName("action6_2_1Random_forest")
        self.action6_2_2Random_forest = QtWidgets.QAction(MainWindow)
        self.action6_2_2Random_forest.setObjectName("action6_2_2Random_forest")
        self.action6_2_3Random_forest_RandomSearchCV = QtWidgets.QAction(MainWindow)
        self.action6_2_3Random_forest_RandomSearchCV.setObjectName("action6_2_3Random_forest_RandomSearchCV")
        self.action6_3_1Bagging = QtWidgets.QAction(MainWindow)
        self.action6_3_1Bagging.setObjectName("action6_3_1Bagging")
        self.action6_4_1AdaBoost = QtWidgets.QAction(MainWindow)
        self.action6_4_1AdaBoost.setObjectName("action6_4_1AdaBoost")
        self.action8_1_1pydel = QtWidgets.QAction(MainWindow)
        self.action8_1_1pydel.setObjectName("action8_1_1pydel")
        self.action6_5_1GradientBoosting = QtWidgets.QAction(MainWindow)
        self.action6_5_1GradientBoosting.setObjectName("action6_5_1GradientBoosting")
        self.action6_6_1ExtraTree = QtWidgets.QAction(MainWindow)
        self.action6_6_1ExtraTree.setObjectName("action6_6_1ExtraTree")
        self.action6_7_1svm = QtWidgets.QAction(MainWindow)
        self.action6_7_1svm.setObjectName("action6_7_1svm")
        self.action6_8_1DecisionTree = QtWidgets.QAction(MainWindow)
        self.action6_8_1DecisionTree.setObjectName("action6_8_1DecisionTree")
        self.action6_9_1LinearRegression = QtWidgets.QAction(MainWindow)
        self.action6_9_1LinearRegression.setObjectName("action6_9_1LinearRegression")
        self.action6_10_1Ridge = QtWidgets.QAction(MainWindow)
        self.action6_10_1Ridge.setObjectName("action6_10_1Ridge")
        self.action6_11_1MLP = QtWidgets.QAction(MainWindow)
        self.action6_11_1MLP.setObjectName("action6_11_1MLP")
        self.action6_11_2MLP_modify = QtWidgets.QAction(MainWindow)
        self.action6_11_2MLP_modify.setObjectName("action6_11_2MLP_modify")
        self.action3 = QtWidgets.QAction(MainWindow)
        self.action3.setObjectName("action3")
        self.action4 = QtWidgets.QAction(MainWindow)
        self.action4.setObjectName("action4")
        self.action_2 = QtWidgets.QAction(MainWindow)
        self.action_2.setObjectName("action_2")
        self.action_5 = QtWidgets.QAction(MainWindow)
        self.action_5.setObjectName("action_5")
        self.action_smiles = QtWidgets.QAction(MainWindow)
        self.action_smiles.setObjectName("action_smiles")
        self.action_6 = QtWidgets.QAction(MainWindow)
        self.action_6.setObjectName("action_6")
        self.action_7 = QtWidgets.QAction(MainWindow)
        self.action_7.setObjectName("action_7")
        self.actionrdkit = QtWidgets.QAction(MainWindow)
        self.actionrdkit.setObjectName("actionrdkit")
        self.actionmatminer = QtWidgets.QAction(MainWindow)
        self.actionmatminer.setObjectName("actionmatminer")
        self.action7_3_rnd_search_cv_xgboost = QtWidgets.QAction(MainWindow)
        self.action7_3_rnd_search_cv_xgboost.setObjectName("action7_3_rnd_search_cv_xgboost")
        self.action9_1 = QtWidgets.QAction(MainWindow)
        self.action9_1.setObjectName("action9_1")
        self.action9_2 = QtWidgets.QAction(MainWindow)
        self.action9_2.setObjectName("action9_2")
        self.action9_3_tSR = QtWidgets.QAction(MainWindow)
        self.action9_3_tSR.setObjectName("action9_3_tSR")
        self.action8_1_2_rdkit = QtWidgets.QAction(MainWindow)
        self.action8_1_2_rdkit.setObjectName("action8_1_2_rdkit")
        self.action_9 = QtWidgets.QAction(MainWindow)
        self.action_9.setObjectName("action_9")
        self.action_10 = QtWidgets.QAction(MainWindow)
        self.action_10.setObjectName("action_10")
        self.actionExtraTreesClassifier = QtWidgets.QAction(MainWindow)
        self.actionExtraTreesClassifier.setObjectName("actionExtraTreesClassifier")
        self.actiondefault = QtWidgets.QAction(MainWindow)
        self.actiondefault.setObjectName("actiondefault")
        self.actionmodify = QtWidgets.QAction(MainWindow)
        self.actionmodify.setObjectName("actionmodify")
        self.actionrnd_search_cv_xgboost = QtWidgets.QAction(MainWindow)
        self.actionrnd_search_cv_xgboost.setObjectName("actionrnd_search_cv_xgboost")
        self.actiondefault_2 = QtWidgets.QAction(MainWindow)
        self.actiondefault_2.setObjectName("actiondefault_2")
        self.action10_3_GaussianProcessClassifier = QtWidgets.QAction(MainWindow)
        self.action10_3_GaussianProcessClassifier.setObjectName("action10_3_GaussianProcessClassifier")
        self.action10_4_KNeighbors_classifier = QtWidgets.QAction(MainWindow)
        self.action10_4_KNeighbors_classifier.setObjectName("action10_4_KNeighbors_classifier")
        self.action10_5_DecisionTreeClassifier = QtWidgets.QAction(MainWindow)
        self.action10_5_DecisionTreeClassifier.setObjectName("action10_5_DecisionTreeClassifier")
        self.action10_6_SVCClassifier = QtWidgets.QAction(MainWindow)
        self.action10_6_SVCClassifier.setObjectName("action10_6_SVCClassifier")
        self.action_12 = QtWidgets.QAction(MainWindow)
        self.action_12.setObjectName("action_12")
        self.actionn_2 = QtWidgets.QAction(MainWindow)
        self.actionn_2.setObjectName("actionn_2")
        self.actionn_3 = QtWidgets.QAction(MainWindow)
        self.actionn_3.setObjectName("actionn_3")
        self.actionn_4 = QtWidgets.QAction(MainWindow)
        self.actionn_4.setObjectName("actionn_4")
        self.actionn_5 = QtWidgets.QAction(MainWindow)
        self.actionn_5.setObjectName("actionn_5")
        self.action_8 = QtWidgets.QAction(MainWindow)
        self.action_8.setObjectName("action_8")
        self.action_11 = QtWidgets.QAction(MainWindow)
        self.action_11.setObjectName("action_11")
        self.action_15 = QtWidgets.QAction(MainWindow)
        self.action_15.setObjectName("action_15")
        self.action_16 = QtWidgets.QAction(MainWindow)
        self.action_16.setObjectName("action_16")
        self.actionshap = QtWidgets.QAction(MainWindow)
        self.actionshap.setObjectName("actionshap")
        self.actionslme_efficiency = QtWidgets.QAction(MainWindow)
        self.actionslme_efficiency.setObjectName("actionslme_efficiency")
        self.actionSQ_efficiency = QtWidgets.QAction(MainWindow)
        self.actionSQ_efficiency.setObjectName("actionSQ_efficiency")
        self.actionpermutation = QtWidgets.QAction(MainWindow)
        self.actionpermutation.setObjectName("actionpermutation")
        self.actionPCA = QtWidgets.QAction(MainWindow)
        self.actionPCA.setObjectName("actionPCA")
        self.actiondecision_boundary = QtWidgets.QAction(MainWindow)
        self.actiondecision_boundary.setObjectName("actiondecision_boundary")
        self.actionsymbolic_classification = QtWidgets.QAction(MainWindow)
        self.actionsymbolic_classification.setObjectName("actionsymbolic_classification")
        self.actionmodel_construction = QtWidgets.QAction(MainWindow)
        self.actionmodel_construction.setObjectName("actionmodel_construction")
        self.actionfitting_curve = QtWidgets.QAction(MainWindow)
        self.actionfitting_curve.setObjectName("actionfitting_curve")
        self.actionfitting_table = QtWidgets.QAction(MainWindow)
        self.actionfitting_table.setObjectName("actionfitting_table")
        self.actionfuture_analysis = QtWidgets.QAction(MainWindow)
        self.actionfuture_analysis.setObjectName("actionfuture_analysis")
        self.actionexpression_tree = QtWidgets.QAction(MainWindow)
        self.actionexpression_tree.setObjectName("actionexpression_tree")
        self.action_18 = QtWidgets.QAction(MainWindow)
        self.action_18.setObjectName("action_18")
        self.actionslme_efficiency_2 = QtWidgets.QAction(MainWindow)
        self.actionslme_efficiency_2.setObjectName("actionslme_efficiency_2")
        self.actionSQ_efficiency_2 = QtWidgets.QAction(MainWindow)
        self.actionSQ_efficiency_2.setObjectName("actionSQ_efficiency_2")
        self.action_smiles_2 = QtWidgets.QAction(MainWindow)
        self.action_smiles_2.setObjectName("action_smiles_2")
        self.actionpydel = QtWidgets.QAction(MainWindow)
        self.actionpydel.setObjectName("actionpydel")
        self.actionrdkit_2 = QtWidgets.QAction(MainWindow)
        self.actionrdkit_2.setObjectName("actionrdkit_2")
        self.action_importonehot = QtWidgets.QAction(MainWindow)
        self.action_importonehot.setObjectName("action_importonehot")
        self.actionmatminer_2 = QtWidgets.QAction(MainWindow)
        self.actionmatminer_2.setObjectName("actionmatminer_2")
        self.action_20 = QtWidgets.QAction(MainWindow)
        self.action_20.setObjectName("action_20")
        self.action_21 = QtWidgets.QAction(MainWindow)
        self.action_21.setObjectName("action_21")
        self.action_22 = QtWidgets.QAction(MainWindow)
        self.action_22.setObjectName("action_22")
        self.action_14 = QtWidgets.QAction(MainWindow)
        self.action_14.setObjectName("action_14")
        self.actionlabel_conversion = QtWidgets.QAction(MainWindow)
        self.actionlabel_conversion.setObjectName("actionlabel_conversion")
        self.actionExperimental_validation = QtWidgets.QAction(MainWindow)
        self.actionExperimental_validation.setObjectName("actionExperimental_validation")
        self.actionDFT_validation = QtWidgets.QAction(MainWindow)
        self.actionDFT_validation.setObjectName("actionDFT_validation")
        self.actionMaterial_screening = QtWidgets.QAction(MainWindow)
        self.actionMaterial_screening.setObjectName("actionMaterial_screening")
        self.actionShap = QtWidgets.QAction(MainWindow)
        self.actionShap.setObjectName("actionShap")
        self.actionpermutation_2 = QtWidgets.QAction(MainWindow)
        self.actionpermutation_2.setObjectName("actionpermutation_2")
        self.actionPCA_2 = QtWidgets.QAction(MainWindow)
        self.actionPCA_2.setObjectName("actionPCA_2")
        self.actionDecision_boundary = QtWidgets.QAction(MainWindow)
        self.actionDecision_boundary.setObjectName("actionDecision_boundary")
        self.actiont_SNE = QtWidgets.QAction(MainWindow)
        self.actiont_SNE.setObjectName("actiont_SNE")
        self.actionPageRank = QtWidgets.QAction(MainWindow)
        self.actionPageRank.setObjectName("actionPageRank")
        self.actionExperimental_validation_2 = QtWidgets.QAction(MainWindow)
        self.actionExperimental_validation_2.setObjectName("actionExperimental_validation_2")
        self.actionDFT_validation_2 = QtWidgets.QAction(MainWindow)
        self.actionDFT_validation_2.setObjectName("actionDFT_validation_2")
        self.actionSLME_efficiency = QtWidgets.QAction(MainWindow)
        self.actionSLME_efficiency.setObjectName("actionSLME_efficiency")
        self.actionSQ_efficiency_3 = QtWidgets.QAction(MainWindow)
        self.actionSQ_efficiency_3.setObjectName("actionSQ_efficiency_3")
        self.actionData_import = QtWidgets.QAction(MainWindow)
        self.actionData_import.setObjectName("actionData_import")
        self.actionWord2vec = QtWidgets.QAction(MainWindow)
        self.actionWord2vec.setObjectName("actionWord2vec")
        self.actionCosine_similarity = QtWidgets.QAction(MainWindow)
        self.actionCosine_similarity.setObjectName("actionCosine_similarity")
        self.actionPCA_3 = QtWidgets.QAction(MainWindow)
        self.actionPCA_3.setObjectName("actionPCA_3")
        self.actiont_SNE_2 = QtWidgets.QAction(MainWindow)
        self.actiont_SNE_2.setObjectName("actiont_SNE_2")
        self.actionDBscan = QtWidgets.QAction(MainWindow)
        self.actionDBscan.setObjectName("actionDBscan")
        self.actionK_mean = QtWidgets.QAction(MainWindow)
        self.actionK_mean.setObjectName("actionK_mean")
        self.actionSelect_machine_learning_model = QtWidgets.QAction(MainWindow)
        self.actionSelect_machine_learning_model.setObjectName("actionSelect_machine_learning_model")
        self.actionPrediction_visualization = QtWidgets.QAction(MainWindow)
        self.actionPrediction_visualization.setObjectName("actionPrediction_visualization")
        self.actionMore_visualization_only_for_classification = QtWidgets.QAction(MainWindow)
        self.actionMore_visualization_only_for_classification.setObjectName("actionMore_visualization_only_for_classification")
        self.actionMae = QtWidgets.QAction(MainWindow)
        self.actionMae.setObjectName("actionMae")
        self.actionSymbolic_regression = QtWidgets.QAction(MainWindow)
        self.actionSymbolic_regression.setObjectName("actionSymbolic_regression")
        self.actionShap_2 = QtWidgets.QAction(MainWindow)
        self.actionShap_2.setObjectName("actionShap_2")
        self.actionModel_import = QtWidgets.QAction(MainWindow)
        self.actionModel_import.setObjectName("actionModel_import")
        self.actionData_import_2 = QtWidgets.QAction(MainWindow)
        self.actionData_import_2.setObjectName("actionData_import_2")
        self.actionResult = QtWidgets.QAction(MainWindow)
        self.actionResult.setObjectName("actionResult")
        self.actionImport_magpie_formula = QtWidgets.QAction(MainWindow)
        self.actionImport_magpie_formula.setObjectName("actionImport_magpie_formula")
        self.actionGenerate_magpie = QtWidgets.QAction(MainWindow)
        self.actionGenerate_magpie.setCheckable(False)
        self.actionGenerate_magpie.setObjectName("actionGenerate_magpie")
        self.actionTemplates = QtWidgets.QAction(MainWindow)
        self.actionTemplates.setObjectName("actionTemplates")
        self.action2_csv_templates_https_github_com_Zhang_NJ_Lab_NJmatML_templates = QtWidgets.QAction(MainWindow)
        self.action2_csv_templates_https_github_com_Zhang_NJ_Lab_NJmatML_templates.setObjectName("action2_csv_templates_https_github_com_Zhang_NJ_Lab_NJmatML_templates")
        self.action3_number_of_columns_in_the_prediction_csv_RFE_remaining_number_you_entered_in_the_software = QtWidgets.QAction(MainWindow)
        self.action3_number_of_columns_in_the_prediction_csv_RFE_remaining_number_you_entered_in_the_software.setObjectName("action3_number_of_columns_in_the_prediction_csv_RFE_remaining_number_you_entered_in_the_software")
        self.actionXgboost = QtWidgets.QAction(MainWindow)
        self.actionXgboost.setObjectName("actionXgboost")
        self.actionRandom_Forest = QtWidgets.QAction(MainWindow)
        self.actionRandom_Forest.setObjectName("actionRandom_Forest")
        self.actionBagging = QtWidgets.QAction(MainWindow)
        self.actionBagging.setObjectName("actionBagging")
        self.actionAdaBoost = QtWidgets.QAction(MainWindow)
        self.actionAdaBoost.setObjectName("actionAdaBoost")
        self.actionGradient_Boosting = QtWidgets.QAction(MainWindow)
        self.actionGradient_Boosting.setObjectName("actionGradient_Boosting")
        self.actionExtra_Tree = QtWidgets.QAction(MainWindow)
        self.actionExtra_Tree.setObjectName("actionExtra_Tree")
        self.actionSvm = QtWidgets.QAction(MainWindow)
        self.actionSvm.setObjectName("actionSvm")
        self.actionDecision_Tree = QtWidgets.QAction(MainWindow)
        self.actionDecision_Tree.setObjectName("actionDecision_Tree")
        self.actionLinear_Regression = QtWidgets.QAction(MainWindow)
        self.actionLinear_Regression.setObjectName("actionLinear_Regression")
        self.actionRidge = QtWidgets.QAction(MainWindow)
        self.actionRidge.setObjectName("actionRidge")
        self.actionMLP = QtWidgets.QAction(MainWindow)
        self.actionMLP.setObjectName("actionMLP")
        self.actionRamdom_Forest = QtWidgets.QAction(MainWindow)
        self.actionRamdom_Forest.setObjectName("actionRamdom_Forest")
        self.actionExtra_Tree_2 = QtWidgets.QAction(MainWindow)
        self.actionExtra_Tree_2.setObjectName("actionExtra_Tree_2")
        self.actionGaussian_Process = QtWidgets.QAction(MainWindow)
        self.actionGaussian_Process.setObjectName("actionGaussian_Process")
        self.actionKNeighbors = QtWidgets.QAction(MainWindow)
        self.actionKNeighbors.setObjectName("actionKNeighbors")
        self.actionDecision_Tree_2 = QtWidgets.QAction(MainWindow)
        self.actionDecision_Tree_2.setObjectName("actionDecision_Tree_2")
        self.actionSVM = QtWidgets.QAction(MainWindow)
        self.actionSVM.setObjectName("actionSVM")
        self.actionImport = QtWidgets.QAction(MainWindow)
        self.actionImport.setObjectName("actionImport")
        self.actionGenerate = QtWidgets.QAction(MainWindow)
        self.actionGenerate.setObjectName("actionGenerate")
        self.actionImport_2 = QtWidgets.QAction(MainWindow)
        self.actionImport_2.setObjectName("actionImport_2")
        self.actionFeaturize = QtWidgets.QAction(MainWindow)
        self.actionFeaturize.setObjectName("actionFeaturize")
        self.actionImport_Multicolumn_Smiles_Morgan = QtWidgets.QAction(MainWindow)
        self.actionImport_Multicolumn_Smiles_Morgan.setObjectName("actionImport_Multicolumn_Smiles_Morgan")
        self.actionFeaturize_Multicolumn_Smiles_Morgan = QtWidgets.QAction(MainWindow)
        self.actionFeaturize_Multicolumn_Smiles_Morgan.setObjectName("actionFeaturize_Multicolumn_Smiles_Morgan")
        self.actionEnter_virtual_Multicolumn_Smiles = QtWidgets.QAction(MainWindow)
        self.actionEnter_virtual_Multicolumn_Smiles.setObjectName("actionEnter_virtual_Multicolumn_Smiles")
        self.actionGenerate_virtual_Multicolumn_Smiles = QtWidgets.QAction(MainWindow)
        self.actionGenerate_virtual_Multicolumn_Smiles.setObjectName("actionGenerate_virtual_Multicolumn_Smiles")
        self.actionUnder_development = QtWidgets.QAction(MainWindow)
        self.actionUnder_development.setObjectName("actionUnder_development")
        self.actionSLME_efficiency_2 = QtWidgets.QAction(MainWindow)
        self.actionSLME_efficiency_2.setObjectName("actionSLME_efficiency_2")
        self.actionSQ_efficiency_4 = QtWidgets.QAction(MainWindow)
        self.actionSQ_efficiency_4.setObjectName("actionSQ_efficiency_4")
        self.actionDFT = QtWidgets.QAction(MainWindow)
        self.actionDFT.setObjectName("actionDFT")
        self.actionShap_Regression_Model_import = QtWidgets.QAction(MainWindow)
        self.actionShap_Regression_Model_import.setObjectName("actionShap_Regression_Model_import")
        self.actionShap_Regression_Data_import = QtWidgets.QAction(MainWindow)
        self.actionShap_Regression_Data_import.setObjectName("actionShap_Regression_Data_import")
        self.actionShap_Regression_Result = QtWidgets.QAction(MainWindow)
        self.actionShap_Regression_Result.setObjectName("actionShap_Regression_Result")
        self.actionShap_Classification_Model_import = QtWidgets.QAction(MainWindow)
        self.actionShap_Classification_Model_import.setObjectName("actionShap_Classification_Model_import")
        self.actionShap_Classification_Data_import = QtWidgets.QAction(MainWindow)
        self.actionShap_Classification_Data_import.setObjectName("actionShap_Classification_Data_import")
        self.actionShap_Classification_Result = QtWidgets.QAction(MainWindow)
        self.actionShap_Classification_Result.setObjectName("actionShap_Classification_Result")
        self.actionImport_Multicolumn_Smiles_RDKit = QtWidgets.QAction(MainWindow)
        self.actionImport_Multicolumn_Smiles_RDKit.setObjectName("actionImport_Multicolumn_Smiles_RDKit")
        self.actionFeaturize_Multicolumn_Smiles_RDKit = QtWidgets.QAction(MainWindow)
        self.actionFeaturize_Multicolumn_Smiles_RDKit.setObjectName("actionFeaturize_Multicolumn_Smiles_RDKit")
        self.actionEnter_virtual_Multicolumn_Smiles_RDKit = QtWidgets.QAction(MainWindow)
        self.actionEnter_virtual_Multicolumn_Smiles_RDKit.setObjectName("actionEnter_virtual_Multicolumn_Smiles_RDKit")
        self.actionGenerate_virtual_Multicolumn_Smiles_RDKit = QtWidgets.QAction(MainWindow)
        self.actionGenerate_virtual_Multicolumn_Smiles_RDKit.setObjectName("actionGenerate_virtual_Multicolumn_Smiles_RDKit")
        self.actionImport_NLP_model = QtWidgets.QAction(MainWindow)
        self.actionImport_NLP_model.setObjectName("actionImport_NLP_model")
        self.actionCosine_similarity_2 = QtWidgets.QAction(MainWindow)
        self.actionCosine_similarity_2.setObjectName("actionCosine_similarity_2")
        self.actiont_tSNE = QtWidgets.QAction(MainWindow)
        self.actiont_tSNE.setObjectName("actiont_tSNE")
        self.actionAdaboostC = QtWidgets.QAction(MainWindow)
        self.actionAdaboostC.setObjectName("actionAdaboostC")
        self.actionXgboostC = QtWidgets.QAction(MainWindow)
        self.actionXgboostC.setObjectName("actionXgboostC")
        self.actionCatboostC = QtWidgets.QAction(MainWindow)
        self.actionCatboostC.setObjectName("actionCatboostC")
        self.actiont_SNE_Highlight = QtWidgets.QAction(MainWindow)
        self.actiont_SNE_Highlight.setObjectName("actiont_SNE_Highlight")
        self.actionRandom_Forest_Grid_Search = QtWidgets.QAction(MainWindow)
        self.actionRandom_Forest_Grid_Search.setObjectName("actionRandom_Forest_Grid_Search")
        self.actionASE_Visualizer = QtWidgets.QAction(MainWindow)
        self.actionASE_Visualizer.setObjectName("actionASE_Visualizer")
        self.actionMP_cif = QtWidgets.QAction(MainWindow)
        self.actionMP_cif.setObjectName("actionMP_cif")
        self.actionCrystal_structure_generate_magus = QtWidgets.QAction(MainWindow)
        self.actionCrystal_structure_generate_magus.setObjectName("actionCrystal_structure_generate_magus")
        self.actionxxx = QtWidgets.QAction(MainWindow)
        self.actionxxx.setObjectName("actionxxx")
        self.actionImport_MatBERT_model = QtWidgets.QAction(MainWindow)
        self.actionImport_MatBERT_model.setObjectName("actionImport_MatBERT_model")
        self.actionCosine_MatBERT = QtWidgets.QAction(MainWindow)
        self.actionCosine_MatBERT.setObjectName("actionCosine_MatBERT")
        self.actionTarget_Word = QtWidgets.QAction(MainWindow)
        self.actionTarget_Word.setObjectName("actionTarget_Word")
        self.actionUMAP = QtWidgets.QAction(MainWindow)
        self.actionUMAP.setObjectName("actionUMAP")
        self.actionCosine_Similarity_Ranking = QtWidgets.QAction(MainWindow)
        self.actionCosine_Similarity_Ranking.setObjectName("actionCosine_Similarity_Ranking")
        self.actionPlot_UMAP = QtWidgets.QAction(MainWindow)
        self.actionPlot_UMAP.setObjectName("actionPlot_UMAP")
        self.actionInput_Highlight_Word = QtWidgets.QAction(MainWindow)
        self.actionInput_Highlight_Word.setObjectName("actionInput_Highlight_Word")
        self.actionPlot_Clustering_Words = QtWidgets.QAction(MainWindow)
        self.actionPlot_Clustering_Words.setObjectName("actionPlot_Clustering_Words")
        self.actionDNN = QtWidgets.QAction(MainWindow)
        self.actionDNN.setObjectName("actionDNN")
        self.actionCNN = QtWidgets.QAction(MainWindow)
        self.actionCNN.setObjectName("actionCNN")
        self.actionRNN = QtWidgets.QAction(MainWindow)
        self.actionRNN.setObjectName("actionRNN")
        self.actionDNN_2 = QtWidgets.QAction(MainWindow)
        self.actionDNN_2.setObjectName("actionDNN_2")
        self.actionCNN_2 = QtWidgets.QAction(MainWindow)
        self.actionCNN_2.setObjectName("actionCNN_2")
        self.actionRNN_2 = QtWidgets.QAction(MainWindow)
        self.actionRNN_2.setObjectName("actionRNN_2")
        self.menu_rfe_pairplot.addAction(self.action_rfe)
        self.menu_rfe_pairplot.addAction(self.action_rfe_pairplot)
        self.menu_3.addAction(self.action_3)
        self.menu_3.addAction(self.action_4)
        self.menu.addAction(self.actionrfe)
        self.menu.addAction(self.menu_rfe_pairplot.menuAction())
        self.menu.addAction(self.menu_3.menuAction())
        self.menu_2.addAction(self.action)
        self.menu_2.addSeparator()
        self.menuGrid_Search.addAction(self.actionRandom_Forest_Grid_Search)
        self.menuDeep_Learning.addAction(self.actionDNN)
        self.menuDeep_Learning.addAction(self.actionCNN)
        self.menuDeep_Learning.addAction(self.actionRNN)
        self.menuRegression.addAction(self.actionXgboost)
        self.menuRegression.addAction(self.actionRandom_Forest)
        self.menuRegression.addAction(self.actionBagging)
        self.menuRegression.addAction(self.actionAdaBoost)
        self.menuRegression.addAction(self.actionGradient_Boosting)
        self.menuRegression.addAction(self.actionExtra_Tree)
        self.menuRegression.addAction(self.actionSvm)
        self.menuRegression.addAction(self.actionDecision_Tree)
        self.menuRegression.addAction(self.actionLinear_Regression)
        self.menuRegression.addAction(self.actionRidge)
        self.menuRegression.addAction(self.actionMLP)
        self.menuRegression.addAction(self.menuGrid_Search.menuAction())
        self.menuRegression.addAction(self.menuDeep_Learning.menuAction())
        self.menuDeep_Learning_2.addAction(self.actionDNN_2)
        self.menuDeep_Learning_2.addAction(self.actionCNN_2)
        self.menuDeep_Learning_2.addAction(self.actionRNN_2)
        self.menuClassification.addAction(self.actionRamdom_Forest)
        self.menuClassification.addAction(self.actionExtra_Tree_2)
        self.menuClassification.addAction(self.actionGaussian_Process)
        self.menuClassification.addAction(self.actionDecision_Tree_2)
        self.menuClassification.addAction(self.actionSVM)
        self.menuClassification.addAction(self.actionAdaboostC)
        self.menuClassification.addAction(self.actionXgboostC)
        self.menuClassification.addAction(self.actionCatboostC)
        self.menuClassification.addAction(self.menuDeep_Learning_2.menuAction())
        self.menuAlgorithms.addAction(self.menuRegression.menuAction())
        self.menuAlgorithms.addAction(self.menuClassification.menuAction())
        self.menu_6.addAction(self.menuAlgorithms.menuAction())
        self.menuImport_no_featurizer_no_label.addAction(self.actionImport_2)
        self.menuImport_no_featurizer_no_label.addAction(self.actionFeaturize)
        self.menuImport_and_generate_Multicolumn_Smiles_Morgan.addAction(self.actionEnter_virtual_Multicolumn_Smiles)
        self.menuImport_and_generate_Multicolumn_Smiles_Morgan.addAction(self.actionGenerate_virtual_Multicolumn_Smiles)
        self.menuImport_and_generate_Multicolumn_Smiles_RDKit.addSeparator()
        self.menuImport_and_generate_Multicolumn_Smiles_RDKit.addAction(self.actionEnter_virtual_Multicolumn_Smiles_RDKit)
        self.menuImport_and_generate_Multicolumn_Smiles_RDKit.addAction(self.actionGenerate_virtual_Multicolumn_Smiles_RDKit)
        self.menu_7.addAction(self.menuImport_no_featurizer_no_label.menuAction())
        self.menu_7.addAction(self.menuImport_and_generate_Multicolumn_Smiles_RDKit.menuAction())
        self.menu_7.addAction(self.menuImport_and_generate_Multicolumn_Smiles_Morgan.menuAction())
        self.menu_7.addAction(self.action_15)
        self.menu_7.addAction(self.actionSelect_machine_learning_model)
        self.menu_7.addAction(self.action_18)
        self.menu_9.addAction(self.actionSymbolic_regression)
        self.menu_9.addAction(self.actionsymbolic_classification)
        self.menu_15.addAction(self.action_smiles_2)
        self.menu_15.addAction(self.actionrdkit_2)
        self.menu_16.addAction(self.action_importonehot)
        self.menu_16.addAction(self.actionmatminer_2)
        self.menuInorganic_descriptor_matminer.addAction(self.actionImport_magpie_formula)
        self.menuInorganic_descriptor_matminer.addAction(self.actionGenerate_magpie)
        self.menuHybrid_inorganic_organic_2in1.addAction(self.actionImport)
        self.menuHybrid_inorganic_organic_2in1.addAction(self.actionGenerate)
        self.menuMulticolumn_Smiles_Morgan.addAction(self.actionImport_Multicolumn_Smiles_Morgan)
        self.menuMulticolumn_Smiles_Morgan.addAction(self.actionFeaturize_Multicolumn_Smiles_Morgan)
        self.menuOrganic_Multicolum_Smiles_RDKit.addAction(self.actionImport_Multicolumn_Smiles_RDKit)
        self.menuOrganic_Multicolum_Smiles_RDKit.addAction(self.actionFeaturize_Multicolumn_Smiles_RDKit)
        self.menu_10.addAction(self.menuHybrid_inorganic_organic_2in1.menuAction())
        self.menu_10.addAction(self.menuOrganic_Multicolum_Smiles_RDKit.menuAction())
        self.menu_10.addAction(self.menuMulticolumn_Smiles_Morgan.menuAction())
        self.menu_10.addAction(self.menu_15.menuAction())
        self.menu_10.addAction(self.menu_16.menuAction())
        self.menu_10.addAction(self.menuInorganic_descriptor_matminer.menuAction())
        self.menu_17.addAction(self.action_21)
        self.menu_17.addAction(self.action_22)
        self.menu_11.addAction(self.menu_17.menuAction())
        self.menu_11.addAction(self.action_20)
        self.menuShap_Regression.addAction(self.actionShap_Regression_Model_import)
        self.menuShap_Regression.addAction(self.actionShap_Regression_Data_import)
        self.menuShap_Regression.addAction(self.actionShap_Regression_Result)
        self.menuShap_Classification.addAction(self.actionShap_Classification_Model_import)
        self.menuShap_Classification.addAction(self.actionShap_Classification_Data_import)
        self.menuShap_Classification.addAction(self.actionShap_Classification_Result)
        self.menuShapley.addAction(self.menuShap_Regression.menuAction())
        self.menuShapley.addAction(self.menuShap_Classification.menuAction())
        self.menuHints.addAction(self.actionTemplates)
        self.menuHints.addAction(self.action2_csv_templates_https_github_com_Zhang_NJ_Lab_NJmatML_templates)
        self.menuHints.addAction(self.action3_number_of_columns_in_the_prediction_csv_RFE_remaining_number_you_entered_in_the_software)
        self.menuCosine_Similarity_Plot.addAction(self.actionTarget_Word)
        self.menuCosine_Similarity_Plot.addAction(self.actionUMAP)
        self.menuCosine_Similarity_Plot.addAction(self.actionCosine_Similarity_Ranking)
        self.menuCosine_Similarity_Plot.addAction(self.actionPlot_UMAP)
        self.menuClustering.addAction(self.actionInput_Highlight_Word)
        self.menuClustering.addAction(self.actionPlot_Clustering_Words)
        self.menuMatBERT.addAction(self.actionImport_MatBERT_model)
        self.menuMatBERT.addAction(self.menuCosine_Similarity_Plot.menuAction())
        self.menuMatBERT.addAction(self.menuClustering.menuAction())
        self.menuword2vec.addAction(self.actionImport_NLP_model)
        self.menuword2vec.addAction(self.actiont_tSNE)
        self.menuword2vec.addAction(self.actionCosine_similarity_2)
        self.menuword2vec.addAction(self.actiont_SNE_Highlight)
        self.menuNLP.addAction(self.menuword2vec.menuAction())
        self.menuNLP.addAction(self.menuMatBERT.menuAction())
        self.menuVisualizer.addAction(self.actionASE_Visualizer)
        self.menuMaterials_Project.addAction(self.actionMP_cif)
        self.menuCSP.addAction(self.actionCrystal_structure_generate_magus)
        self.menubar.addAction(self.menu_2.menuAction())
        self.menubar.addAction(self.menu_10.menuAction())
        self.menubar.addAction(self.menu_11.menuAction())
        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.menu_6.menuAction())
        self.menubar.addAction(self.menu_7.menuAction())
        self.menubar.addAction(self.menuShapley.menuAction())
        self.menubar.addAction(self.menu_9.menuAction())
        self.menubar.addAction(self.menuNLP.menuAction())
        self.menubar.addAction(self.menuVisualizer.menuAction())
        self.menubar.addAction(self.menuMaterials_Project.menuAction())
        self.menubar.addAction(self.menuCSP.menuAction())
        self.menubar.addAction(self.menuHints.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "citation doi:10.1021/acsami.2c00564"))
        self.menu.setTitle(_translate("MainWindow", "Preprocessing"))
        self.menu_rfe_pairplot.setTitle(_translate("MainWindow", "RFE visualization"))
        self.menu_3.setTitle(_translate("MainWindow", "Importance ranking (Pearson)"))
        self.menu_2.setTitle(_translate("MainWindow", "Directory"))
        self.menu_6.setTitle(_translate("MainWindow", "Machine learning"))
        self.menuAlgorithms.setTitle(_translate("MainWindow", "Algorithms"))
        self.menuRegression.setTitle(_translate("MainWindow", "Regression"))
        self.menuGrid_Search.setTitle(_translate("MainWindow", "Grid Search"))
        self.menuDeep_Learning.setTitle(_translate("MainWindow", "Deep Learning"))
        self.menuClassification.setTitle(_translate("MainWindow", "Classification"))
        self.menuDeep_Learning_2.setTitle(_translate("MainWindow", "Deep Learning"))
        self.menu_7.setTitle(_translate("MainWindow", "Prediction"))
        self.menuImport_no_featurizer_no_label.setTitle(_translate("MainWindow", "Virtual hybrid inorganic organic 2in1 (recommend)"))
        self.menuImport_and_generate_Multicolumn_Smiles_Morgan.setTitle(_translate("MainWindow", "Virtual organic Multicolumn Smiles (Morgan)"))
        self.menuImport_and_generate_Multicolumn_Smiles_RDKit.setTitle(_translate("MainWindow", "Virtual organic Multicolum Smiles (RDKit)"))
        self.menu_9.setTitle(_translate("MainWindow", "Genetic"))
        self.menu_10.setTitle(_translate("MainWindow", "Descriptors"))
        self.menu_15.setTitle(_translate("MainWindow", "Organic descriptor"))
        self.menu_16.setTitle(_translate("MainWindow", "Inorganic descriptor (one-hot)"))
        self.menuInorganic_descriptor_matminer.setTitle(_translate("MainWindow", "Inorganic descriptor (magpie)"))
        self.menuHybrid_inorganic_organic_2in1.setTitle(_translate("MainWindow", "Hybrid inorganic organic (2in1)"))
        self.menuMulticolumn_Smiles_Morgan.setTitle(_translate("MainWindow", "Organic Multicolumn Smiles (Morgan)"))
        self.menuOrganic_Multicolum_Smiles_RDKit.setTitle(_translate("MainWindow", "Organic Multicolum Smiles (RDKit)"))
        self.menu_11.setTitle(_translate("MainWindow", "Dataset"))
        self.menu_17.setTitle(_translate("MainWindow", "Train/Test dataset import and visualization"))
        self.menuShapley.setTitle(_translate("MainWindow", "Shapley"))
        self.menuShap_Regression.setTitle(_translate("MainWindow", "Regression"))
        self.menuShap_Classification.setTitle(_translate("MainWindow", "Classification"))
        self.menuHints.setTitle(_translate("MainWindow", "Help"))
        self.menuNLP.setTitle(_translate("MainWindow", "NLP"))
        self.menuMatBERT.setTitle(_translate("MainWindow", "MatBERT"))
        self.menuCosine_Similarity_Plot.setTitle(_translate("MainWindow", "Cosine Similarity Plot"))
        self.menuClustering.setTitle(_translate("MainWindow", "Clustering Plot"))
        self.menuword2vec.setTitle(_translate("MainWindow", "Word2Vec"))
        self.menuVisualizer.setTitle(_translate("MainWindow", "Visualizer"))
        self.menuMaterials_Project.setTitle(_translate("MainWindow", "Materials Project"))
        self.menuCSP.setTitle(_translate("MainWindow", "CSP"))
        self.action_heatmap.setText(_translate("MainWindow", "2. 热图"))
        self.actionrfe.setText(_translate("MainWindow", "RFE feature selection"))
        self.action1.setText(_translate("MainWindow", "导入训练测试"))
        self.action2.setText(_translate("MainWindow", "导入预测"))
        self.action.setText(_translate("MainWindow", "Save directory"))
        self.action_rfe.setText(_translate("MainWindow", "RFE heat map"))
        self.action_3.setText(_translate("MainWindow", "Importance ranking before RFE"))
        self.action_4.setText(_translate("MainWindow", "Importance ranking after RFE"))
        self.action_rfe_pairplot.setText(_translate("MainWindow", "RFE pairplot"))
        self.action6_1_1xgboost.setText(_translate("MainWindow", "6.1.1 xgboost默认超参数建模画图"))
        self.action6_1_2xgboost.setText(_translate("MainWindow", "6.1.2 xgboost自己修改超参数, 建模"))
        self.action6_1_3xgboostRandomSearchCV.setText(_translate("MainWindow", "6.1.3 xgboostRandomSearchCV随机超参数, 建模并观察准确率"))
        self.action6_1_4xgboost_SearchCV.setText(_translate("MainWindow", "6.1.4 xgboost SearchCV网格搜索（并非随机）寻找最优超参数, 建模并观察准确率"))
        self.action6_2_1Random_forest.setText(_translate("MainWindow", "6.2.1Random forest 默认超参数建模画图"))
        self.action6_2_2Random_forest.setText(_translate("MainWindow", "6.2.2Random forest 自己修改超参数建模画图"))
        self.action6_2_3Random_forest_RandomSearchCV.setText(_translate("MainWindow", "6.2.3Random forest RandomSearchCV 随机搜索超参数建模画图"))
        self.action6_3_1Bagging.setText(_translate("MainWindow", "6.3.1Bagging 默认建模画图"))
        self.action6_4_1AdaBoost.setText(_translate("MainWindow", "6.4.1AdaBoost默认建模画图"))
        self.action8_1_1pydel.setText(_translate("MainWindow", "8.1.1 pydel描述符"))
        self.action6_5_1GradientBoosting.setText(_translate("MainWindow", "6.5.1GradientBoosting默认建模画图"))
        self.action6_6_1ExtraTree.setText(_translate("MainWindow", "6.6.1ExtraTree默认建模画图"))
        self.action6_7_1svm.setText(_translate("MainWindow", "6.7.1svm默认建模画图"))
        self.action6_8_1DecisionTree.setText(_translate("MainWindow", "6.8.1DecisionTree默认建模画图"))
        self.action6_9_1LinearRegression.setText(_translate("MainWindow", "6.9.1LinearRegression默认建模画图"))
        self.action6_10_1Ridge.setText(_translate("MainWindow", "6.10.1Ridge默认建模画图"))
        self.action6_11_1MLP.setText(_translate("MainWindow", "6.11.1MLP默认建模画图"))
        self.action6_11_2MLP_modify.setText(_translate("MainWindow", "6.11.2MLP_modify手动修改超参数建模画图"))
        self.action3.setText(_translate("MainWindow", "导入有机smiles"))
        self.action4.setText(_translate("MainWindow", "导入无机化学式"))
        self.action_2.setText(_translate("MainWindow", "训练测试集地址"))
        self.action_5.setText(_translate("MainWindow", "导入预测集"))
        self.action_smiles.setText(_translate("MainWindow", "导入有机smiles"))
        self.action_6.setText(_translate("MainWindow", "导入无机化学式"))
        self.action_7.setText(_translate("MainWindow", "导入并可视化"))
        self.actionrdkit.setText(_translate("MainWindow", "rdkit描述符生成"))
        self.actionmatminer.setText(_translate("MainWindow", "matminer无机材料描述符生成"))
        self.action7_3_rnd_search_cv_xgboost.setText(_translate("MainWindow", "7.3 待加"))
        self.action9_1.setText(_translate("MainWindow", "9.1 遗传算法默认普通运算符"))
        self.action9_2.setText(_translate("MainWindow", "9.2 遗传算法更多运算符"))
        self.action9_3_tSR.setText(_translate("MainWindow", "9.3 tSR 默认方法"))
        self.action8_1_2_rdkit.setText(_translate("MainWindow", "8.1.2 rdkit描述符"))
        self.action_9.setText(_translate("MainWindow", "导入文件"))
        self.action_10.setText(_translate("MainWindow", "10.1 RandomForestClassifier"))
        self.actionExtraTreesClassifier.setText(_translate("MainWindow", "10.2 ExtraTreesClassifier"))
        self.actiondefault.setText(_translate("MainWindow", "7.1.1 default预测"))
        self.actionmodify.setText(_translate("MainWindow", "7.1.2 modify预测"))
        self.actionrnd_search_cv_xgboost.setText(_translate("MainWindow", "7.1.3 rnd_search_cv预测"))
        self.actiondefault_2.setText(_translate("MainWindow", "7.2.1 default预测"))
        self.action10_3_GaussianProcessClassifier.setText(_translate("MainWindow", "10.3 GaussianProcess_Classifier"))
        self.action10_4_KNeighbors_classifier.setText(_translate("MainWindow", "10.4 KNeighbors_Classifier"))
        self.action10_5_DecisionTreeClassifier.setText(_translate("MainWindow", "10.5 DecisionTree_Classifier"))
        self.action10_6_SVCClassifier.setText(_translate("MainWindow", "10.6 SVC_Classifier"))
        self.action_12.setText(_translate("MainWindow", "导入连续型数据集"))
        self.actionn_2.setText(_translate("MainWindow", "n=2"))
        self.actionn_3.setText(_translate("MainWindow", "n=2"))
        self.actionn_4.setText(_translate("MainWindow", "n=3"))
        self.actionn_5.setText(_translate("MainWindow", "n=4"))
        self.action_8.setText(_translate("MainWindow", "机器学习建模"))
        self.action_11.setText(_translate("MainWindow", "预测集建立"))
        self.action_15.setText(_translate("MainWindow", "Import virtual data (without label)"))
        self.action_16.setText(_translate("MainWindow", "Prediction construction (without label)"))
        self.actionshap.setText(_translate("MainWindow", "Shap"))
        self.actionslme_efficiency.setText(_translate("MainWindow", "slme efficiency"))
        self.actionSQ_efficiency.setText(_translate("MainWindow", "SQ efficiency"))
        self.actionpermutation.setText(_translate("MainWindow", "permutation"))
        self.actionPCA.setText(_translate("MainWindow", "PCA"))
        self.actiondecision_boundary.setText(_translate("MainWindow", "Decision boundary"))
        self.actionsymbolic_classification.setText(_translate("MainWindow", "Symbolic classification"))
        self.actionmodel_construction.setText(_translate("MainWindow", "Model construction"))
        self.actionfitting_curve.setText(_translate("MainWindow", "Fitting plot"))
        self.actionfitting_table.setText(_translate("MainWindow", "Learning curve"))
        self.actionfuture_analysis.setText(_translate("MainWindow", "Feature analysis"))
        self.actionexpression_tree.setText(_translate("MainWindow", "Expression tree"))
        self.action_18.setText(_translate("MainWindow", "Prediction generation (with label)"))
        self.actionslme_efficiency_2.setText(_translate("MainWindow", "SLME efficiency"))
        self.actionSQ_efficiency_2.setText(_translate("MainWindow", "SQ efficiency"))
        self.action_smiles_2.setText(_translate("MainWindow", "Import smiles"))
        self.actionpydel.setText(_translate("MainWindow", "* PaDEL"))
        self.actionrdkit_2.setText(_translate("MainWindow", "RDKit"))
        self.action_importonehot.setText(_translate("MainWindow", "Import formula "))
        self.actionmatminer_2.setText(_translate("MainWindow", "Generate descriptors"))
        self.action_20.setText(_translate("MainWindow", "Heat map"))
        self.action_21.setText(_translate("MainWindow", "Import"))
        self.action_22.setText(_translate("MainWindow", "Visualize"))
        self.action_14.setText(_translate("MainWindow", "Model selection"))
        self.actionlabel_conversion.setText(_translate("MainWindow", "* Label conversion"))
        self.actionExperimental_validation.setText(_translate("MainWindow", "Experimental validation"))
        self.actionDFT_validation.setText(_translate("MainWindow", "DFT validation"))
        self.actionMaterial_screening.setText(_translate("MainWindow", "Material screening"))
        self.actionShap.setText(_translate("MainWindow", "Shap"))
        self.actionpermutation_2.setText(_translate("MainWindow", "Permutation"))
        self.actionPCA_2.setText(_translate("MainWindow", "PCA"))
        self.actionDecision_boundary.setText(_translate("MainWindow", "Decision boundary"))
        self.actiont_SNE.setText(_translate("MainWindow", "t-SNE"))
        self.actionPageRank.setText(_translate("MainWindow", "PageRank"))
        self.actionExperimental_validation_2.setText(_translate("MainWindow", "Experimental validation"))
        self.actionDFT_validation_2.setText(_translate("MainWindow", "DFT validation"))
        self.actionSLME_efficiency.setText(_translate("MainWindow", "SLME efficiency"))
        self.actionSQ_efficiency_3.setText(_translate("MainWindow", "SQ efficiency"))
        self.actionData_import.setText(_translate("MainWindow", "Data import"))
        self.actionWord2vec.setText(_translate("MainWindow", "Word2vec"))
        self.actionCosine_similarity.setText(_translate("MainWindow", "Cosine similarity"))
        self.actionPCA_3.setText(_translate("MainWindow", "PCA"))
        self.actiont_SNE_2.setText(_translate("MainWindow", "t-SNE"))
        self.actionDBscan.setText(_translate("MainWindow", "DBscan"))
        self.actionK_mean.setText(_translate("MainWindow", "K-mean"))
        self.actionSelect_machine_learning_model.setText(_translate("MainWindow", "Select machine learning model"))
        self.actionPrediction_visualization.setText(_translate("MainWindow", "Prediction visualization (only for classification)"))
        self.actionMore_visualization_only_for_classification.setText(_translate("MainWindow", "*More visualization (only for classification)"))
        self.actionMae.setText(_translate("MainWindow", "Mae"))
        self.actionSymbolic_regression.setText(_translate("MainWindow", "Symbolic regression"))
        self.actionShap_2.setText(_translate("MainWindow", "Shapley analysis"))
        self.actionModel_import.setText(_translate("MainWindow", "Model import "))
        self.actionData_import_2.setText(_translate("MainWindow", "Data import"))
        self.actionResult.setText(_translate("MainWindow", "Result"))
        self.actionImport_magpie_formula.setText(_translate("MainWindow", "Import formula"))
        self.actionGenerate_magpie.setText(_translate("MainWindow", "Generate magpie features"))
        self.actionTemplates.setText(_translate("MainWindow", "1. only csv files are accepted."))
        self.action2_csv_templates_https_github_com_Zhang_NJ_Lab_NJmatML_templates.setText(_translate("MainWindow", "2. four csv templates:  https://github.com/huangyiru123/NJmat_dataset"))
        self.action3_number_of_columns_in_the_prediction_csv_RFE_remaining_number_you_entered_in_the_software.setText(_translate("MainWindow", "3. resources:  https://figshare.com/articles/software/NJmatML/24607893"))
        self.actionXgboost.setText(_translate("MainWindow", "Xgboost"))
        self.actionRandom_Forest.setText(_translate("MainWindow", "Random Forest"))
        self.actionBagging.setText(_translate("MainWindow", "Bagging"))
        self.actionAdaBoost.setText(_translate("MainWindow", "AdaBoost"))
        self.actionGradient_Boosting.setText(_translate("MainWindow", "Gradient Boosting"))
        self.actionExtra_Tree.setText(_translate("MainWindow", "Extra Tree"))
        self.actionSvm.setText(_translate("MainWindow", "SVM"))
        self.actionDecision_Tree.setText(_translate("MainWindow", "Decision Tree"))
        self.actionLinear_Regression.setText(_translate("MainWindow", "Linear Regression"))
        self.actionRidge.setText(_translate("MainWindow", "Ridge"))
        self.actionMLP.setText(_translate("MainWindow", "MLP"))
        self.actionRamdom_Forest.setText(_translate("MainWindow", "Random Forest"))
        self.actionExtra_Tree_2.setText(_translate("MainWindow", "Extra Tree"))
        self.actionGaussian_Process.setText(_translate("MainWindow", "Gaussian Process"))
        self.actionKNeighbors.setText(_translate("MainWindow", "*KNeighbors"))
        self.actionDecision_Tree_2.setText(_translate("MainWindow", "Decision Tree"))
        self.actionSVM.setText(_translate("MainWindow", "SVM"))
        self.actionImport.setText(_translate("MainWindow", "Import"))
        self.actionGenerate.setText(_translate("MainWindow", "Featurize"))
        self.actionImport_2.setText(_translate("MainWindow", "Import"))
        self.actionFeaturize.setText(_translate("MainWindow", "Generate"))
        self.actionImport_Multicolumn_Smiles_Morgan.setText(_translate("MainWindow", "Import"))
        self.actionFeaturize_Multicolumn_Smiles_Morgan.setText(_translate("MainWindow", "Featurize"))
        self.actionEnter_virtual_Multicolumn_Smiles.setText(_translate("MainWindow", "Import"))
        self.actionGenerate_virtual_Multicolumn_Smiles.setText(_translate("MainWindow", "Generate"))
        self.actionUnder_development.setText(_translate("MainWindow", "Under development"))
        self.actionSLME_efficiency_2.setText(_translate("MainWindow", "SLME efficiency"))
        self.actionSQ_efficiency_4.setText(_translate("MainWindow", "SQ efficiency"))
        self.actionDFT.setText(_translate("MainWindow", "DFT"))
        self.actionShap_Regression_Model_import.setText(_translate("MainWindow", "Model import"))
        self.actionShap_Regression_Data_import.setText(_translate("MainWindow", "Data import"))
        self.actionShap_Regression_Result.setText(_translate("MainWindow", "Result"))
        self.actionShap_Classification_Model_import.setText(_translate("MainWindow", "Model import"))
        self.actionShap_Classification_Data_import.setText(_translate("MainWindow", "Data import"))
        self.actionShap_Classification_Result.setText(_translate("MainWindow", "Result"))
        self.actionImport_Multicolumn_Smiles_RDKit.setText(_translate("MainWindow", "Import"))
        self.actionFeaturize_Multicolumn_Smiles_RDKit.setText(_translate("MainWindow", "Featurize"))
        self.actionEnter_virtual_Multicolumn_Smiles_RDKit.setText(_translate("MainWindow", "Import"))
        self.actionGenerate_virtual_Multicolumn_Smiles_RDKit.setText(_translate("MainWindow", "Generate"))
        self.actionImport_NLP_model.setText(_translate("MainWindow", "Import NLP model"))
        self.actionCosine_similarity_2.setText(_translate("MainWindow", "Cosine similarity"))
        self.actiont_tSNE.setText(_translate("MainWindow", "t-SNE"))
        self.actionAdaboostC.setText(_translate("MainWindow", "Adaboost"))
        self.actionXgboostC.setText(_translate("MainWindow", "Xgboost"))
        self.actionCatboostC.setText(_translate("MainWindow", "Catboost"))
        self.actiont_SNE_Highlight.setText(_translate("MainWindow", "t-SNE Highlight"))
        self.actionRandom_Forest_Grid_Search.setText(_translate("MainWindow", "Random Forest Grid Search"))
        self.actionASE_Visualizer.setText(_translate("MainWindow", "ASE Visualizer"))
        self.actionMP_cif.setText(_translate("MainWindow", "MP cif"))
        self.actionCrystal_structure_generate_magus.setText(_translate("MainWindow", "Crystal structure generate (magus)"))
        self.actionxxx.setText(_translate("MainWindow", "Import NLP model"))
        self.actionImport_MatBERT_model.setText(_translate("MainWindow", "Import MatBERT Model"))
        self.actionCosine_MatBERT.setText(_translate("MainWindow", "Cosine MatBERT"))
        self.actionTarget_Word.setText(_translate("MainWindow", "Target Word"))
        self.actionUMAP.setText(_translate("MainWindow", "Dimension Reduction (UMAP)"))
        self.actionCosine_Similarity_Ranking.setText(_translate("MainWindow", "Cosine Similarity Ranking"))
        self.actionPlot_UMAP.setText(_translate("MainWindow", "Plot UMAP"))
        self.actionInput_Highlight_Word.setText(_translate("MainWindow", "Input Highlight Words"))
        self.actionPlot_Clustering_Words.setText(_translate("MainWindow", "Plot Clustering Words"))
        self.actionDNN.setText(_translate("MainWindow", "DNN"))
        self.actionCNN.setText(_translate("MainWindow", "CNN"))
        self.actionRNN.setText(_translate("MainWindow", "RNN"))
        self.actionDNN_2.setText(_translate("MainWindow", "DNN"))
        self.actionCNN_2.setText(_translate("MainWindow", "CNN"))
        self.actionRNN_2.setText(_translate("MainWindow", "RNN"))
